{"version":3,"sources":["app/constants/Colors.ts","app/components/Themed.tsx","app/components/colorThemes.tsx","app/components/ThemeContext.tsx","app/components/Toolbar.tsx","app/screens/TabDevScreen.tsx","app/navigation/MainScreen.tsx","app/screens/TabProjectsScreen.tsx","app/screens/TabSnippetsScreen.tsx","app/navigation/index.tsx","app/screens/WelcomeOverlay.tsx","App.tsx","app/hooks/useCachedResources.ts","app/assets/fonts/SpaceMono-Regular.ttf"],"names":["light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","colorFromProps","Colors","View","style","lightColor","darkColor","otherProps","backgroundColor","lightColors","navBackground","primary","error","darkColors","ThemeContext","React","isDark","colors","setScheme","scheme","ThemeProvider","localData_colorScheme","Platform","OS","localStorage","getItem","colorScheme","useColorScheme","setIsDark","defaultTheme","setItem","Provider","value","children","useTheme","Toolbar","styles","StyleSheet","create","container","width","height","flexDirection","alignContent","justifyContent","flexWrap","padding","paddingTop","paddingBottom","name","size","color","marginRight","solid","Switch","onValueChange","TabDevScreen","flex","alignItems","elemStyles","title","desc","paddingLeft","paddingRight","h2","h4","numberOfLines","marginTop","MainScreen","navigation","useNavigation","isFocused","useIsFocused","CustomDrawerContent","DrawerContentScrollView","DrawerItemList","DrawerItem","label","onPress","navigate","dispatch","DrawerActions","closeDrawer","icon","Drawer","createDrawerNavigator","Navigator","initialRouteName","drawerContent","drawerType","drawerStyle","Screen","component","options","drawerIcon","TabProjectsScreen","TabSnippetsScreen","createStackNavigator","TopTab","createMaterialTopTabNavigator","Navigation","NavigationContainer","tabBarPosition","lazy","lazyPreloadDistance","swipeVelocityImpact","tabBarOptions","activeTintColor","showIcon","indicatorStyle","iconStyle","pressColor","allowFontScaling","MainScreenTabNavigator","tabBarLabel","tabBarIcon","TabBarIcon","ProjectsTabNavigator","SnippetsTabNavigator","marginBottom","dpTitle","MainScreenTabStack","TabMainScreen","headerShown","headerTitle","ProjectsTabStack","SnippetsTabStack","WelcomeOverlay","useState","visible","setVisible","toggleOverlay","SwipeFadeAnim","fadeStartValue","useRef","Animated","Value","current","swipeStartValue","swipeEndValue","direction","useEffect","looper","i","setTimeout","timing","useNativeDriver","isInteraction","toValue","duration","easing","Easing","linear","start","setValue","opacity","transform","translateX","Modal","setAppElement","position","top","left","zIndex","elevation","TouchableOpacity","ModalComponent","undefined","isVisible","onBackdropPress","overlayStyle","shadowOpacity","fontSize","alignSelf","fontWeight","marginLeft","right","bottom","App","isLoadingComplete","setLoadingComplete","a","async","SplashScreen","Font","Ionicons","font","require","console","warn","useCachedResources","Appearance","getColorScheme","StatusBar","module","exports"],"mappings":"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","file":"static/js/app.cb4e67de.chunk.js","sourcesContent":["const tintColorLight = \"#2f95dc\";\nconst tintColorDark = \"#fff\";\n\nexport default {\n  light: {\n    text: \"#000\",\n    background: \"#fff\",\n    tint: tintColorLight,\n    tabIconDefault: \"#ccc\",\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: \"#fff\",\n    background: \"#000\",\n    tint: tintColorDark,\n    tabIconDefault: \"#ccc\",\n    tabIconSelected: tintColorDark,\n  },\n};\n","import * as React from \"react\";\nimport { Text as DefaultText, View as DefaultView } from \"react-native\";\n\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText[\"props\"];\nexport type ViewProps = ThemeProps & DefaultView[\"props\"];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, \"text\");\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor(\n    { light: lightColor, dark: darkColor },\n    \"background\"\n  );\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","// Light theme colors\nexport const lightColors = {\n  navBackground: \"lightgray\",\n  background: \"whitesmoke\",\n  primary: \"dimgrey\",\n  text: \"dimgrey\",\n  error: \"slategrey\",\n};\n\n// Dark theme colors\nexport const darkColors = {\n  navBackground: \"lightgray\",\n  background: \"#101111\",\n  primary: \"dimgrey\",\n  text: \"gainsboro\",\n  error: \"darkslategrey\",\n};\n","import * as React from \"react\";\nimport { Platform } from \"react-native\";\nimport { useColorScheme } from \"react-native-appearance\";\nimport { lightColors, darkColors } from \"./colorThemes\";\n\nexport const ThemeContext = React.createContext({\n  isDark: false,\n  colors: lightColors,\n  setScheme: (scheme: string) => {},\n});\n\nexport const ThemeProvider = (props: any) => {\n  // Get data of saved colorScheme\n  let localData_colorScheme: any;\n  if (Platform.OS === \"web\") {\n    localData_colorScheme = localStorage.getItem(\"colorScheme\");\n    // console.log(localData_colorScheme);\n  }\n\n  // Getting the device color theme, this will also work with react-native-web\n  const colorScheme = localData_colorScheme\n    ? Platform.OS === \"web\" && localData_colorScheme\n    : useColorScheme(); // Can be dark | light | no-preference\n\n  /*\n   * To enable changing the app theme dynamicly in the app (run-time)\n   * we're gonna use useState so we can override the default device theme\n   */\n  const [isDark, setIsDark] = React.useState(colorScheme === \"dark\");\n\n  // Listening to changes of device appearance while in run-time\n  React.useEffect(() => {\n    // Set scheme to local values\n    if (localData_colorScheme) {\n      setIsDark(localData_colorScheme === \"dark\");\n    } else {\n      setIsDark(colorScheme === \"dark\");\n    }\n  }, [colorScheme]);\n\n  const defaultTheme: any = {\n    isDark,\n    // Chaning color schemes according to theme\n    colors: isDark ? darkColors : lightColors,\n    // Overrides the isDark value will cause re-render inside the context.\n    setScheme: (scheme: string) => {\n      setIsDark(scheme === \"dark\");\n      // Save scheme to local storage\n      if (Platform.OS === \"web\") localStorage.setItem(\"colorScheme\", scheme);\n    },\n  };\n\n  return (\n    <ThemeContext.Provider value={defaultTheme}>\n      {props.children}\n    </ThemeContext.Provider>\n  );\n};\n\n// Custom hook to get the theme object returns {isDark, colors, setScheme}\nexport const useTheme = () => React.useContext(ThemeContext);\n","import * as React from \"react\";\nimport { Platform, StyleSheet, Switch } from \"react-native\";\n\nimport { View } from \"./Themed\";\n\nimport { Appearance, useColorScheme } from \"react-native-appearance\";\n\nimport { useTheme } from \"../components/ThemeContext\";\nimport { Text, colors as elementsColor } from \"react-native-elements\";\nimport Icon from \"react-native-vector-icons/FontAwesome5\";\n\nexport default function Toolbar() {\n  const { setScheme, colors, isDark } = useTheme();\n\n  const styles = StyleSheet.create({\n    container: {\n      width: \"100%\",\n      height: 45,\n      flexDirection: \"row\",\n      alignContent: \"center\",\n      justifyContent: \"flex-end\",\n      flexWrap: \"wrap\",\n      backgroundColor: colors.navBackground,\n      padding: 15,\n      paddingTop: Platform.OS === \"ios\" ? 70 : 10,\n      paddingBottom: Platform.OS === \"ios\" ? 30 : 10,\n    },\n  });\n\n  const elemStyles = {\n    title: {\n      color: colors.text,\n    },\n    error: {\n      color: colors.error,\n    },\n  };\n\n  const toggleScheme = () => {\n    /*\n     * setScheme will change the state of the context\n     * thus will cause childrens inside the context provider to re-render\n     * with the new color scheme\n     */\n    isDark ? setScheme(\"light\") : setScheme(\"dark\");\n  };\n\n  return (\n    <View style={styles.container}>\n      <Icon\n        name=\"cloud-moon\"\n        size={20}\n        color={colors.primary}\n        style={{ marginRight: 7 }}\n        solid\n      />\n      <Switch value={isDark} onValueChange={toggleScheme} />\n    </View>\n  );\n}\n","import * as React from \"react\";\nimport { Platform } from \"react-native\";\nimport { ActivityIndicator, StyleSheet } from \"react-native\";\n\n// import EditScreenInfo from \"../components/EditScreenInfo\";\nimport { View } from \"../components/Themed\";\n\n// import { Appearance, useColorScheme } from \"react-native-appearance\";\n\nimport { useTheme } from \"../components/ThemeContext\";\nimport { Text, Image, colors as elementsColor } from \"react-native-elements\";\nimport Icon from \"react-native-vector-icons/FontAwesome5\";\n\nexport default function TabDevScreen() {\n  const { setScheme, colors, isDark } = useTheme();\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      /*\n       * the colors.background value will change dynamicly with\n       * so if we wanna change its value we can go directly to the pallet\n       * this will make super easy to change and maintain mid or end project\n       */\n      backgroundColor: colors.background,\n    },\n  });\n\n  const elemStyles = {\n    title: {\n      color: colors.text,\n    },\n    desc: {\n      color: colors.text,\n      paddingTop: 20,\n      paddingLeft: Platform.OS === \"web\" ? \"10%\" : \"7%\",\n      paddingRight: Platform.OS === \"web\" ? \"10%\" : \"7%\",\n    },\n    error: {\n      color: colors.error,\n    },\n  };\n\n  return (\n    <View style={styles.container}>\n      {/* <Image\n        source={require(\"../assets/images/az-logo.png\")}\n        style={{ width: 200, height: 200, marginBottom: 70 }}\n        PlaceholderContent={\n          <ActivityIndicator\n            style={{\n              position: \"absolute\",\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0,\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              backgroundColor: colors.background,\n            }}\n            animating={true}\n            color={colors.primary}\n          />\n        }\n      /> */}\n      <Text h2 style={elemStyles.title}>\n        Adrian del Rosario\n      </Text>\n      <Text h4 style={elemStyles.error}>\n        Cross-Platform Digital Portfolio\n      </Text>\n\n      <Text style={elemStyles.desc} numberOfLines={2}>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras vel\n        feugiat ligula, et pretium dolor. Integer vel mollis mauris. Donec\n        maximus tristique condimentum. Quisque posuere augue non luctus posuere.\n      </Text>\n      <View\n        style={{\n          backgroundColor: colors.background,\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          marginTop: 40,\n        }}\n      ></View>\n    </View>\n  );\n\n  // return (\n  //   <View style={styles.container}>\n  //     <Text style={styles.title}>Tab One</Text>\n  //     <View\n  //       style={styles.separator}\n  //       lightColor=\"#eee\"\n  //       darkColor=\"rgba(255,255,255,0.1)\"\n  //     />\n\n  //     <Switch value={isDark} onValueChange={toggleScheme} />\n\n  //     <EditScreenInfo path=\"/screens/TabOneScreen.tsx\" />\n  //   </View>\n  // );\n}\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     alignItems: \"center\",\n//     justifyContent: \"center\",\n//   },\n//   title: {\n//     fontSize: 20,\n//     fontWeight: \"bold\",\n//   },\n//   separator: {\n//     marginVertical: 30,\n//     height: 1,\n//     width: \"80%\",\n//   },\n// });\n","import * as React from \"react\";\nimport { Platform } from \"react-native\";\nimport { StyleSheet } from \"react-native\";\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from \"@react-navigation/drawer\";\nimport {\n  useNavigation,\n  useIsFocused,\n  DrawerActions,\n} from \"@react-navigation/native\";\n\nimport TabDevScreen from \"../screens/TabDevScreen\";\n\nimport { useTheme } from \"../components/ThemeContext\";\nimport { Text, Image, colors as elementsColor } from \"react-native-elements\";\nimport Icon from \"react-native-vector-icons/Ionicons\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { color } from \"react-native-reanimated\";\n// import { color } from \"react-native-reanimated\";\n\nexport default function MainScreen() {\n  const { setScheme, colors, isDark } = useTheme();\n\n  const navigation: any = useNavigation(),\n    isFocused = useIsFocused();\n\n  function CustomDrawerContent(props: any) {\n    return (\n      <DrawerContentScrollView {...props}>\n        <DrawerItemList {...props} />\n        <DrawerItem\n          label={() => <Text style={{ color: colors.text }}>Projects</Text>}\n          onPress={() => {\n            navigation.navigate(\"TabProjects\");\n            navigation.dispatch(DrawerActions.closeDrawer());\n          }}\n          icon={() => (\n            <Icon\n              color={colors.text}\n              size={24}\n              name={isFocused ? \"briefcase-sharp\" : \"briefcase-outline\"}\n            />\n          )}\n        />\n        <DrawerItem\n          label={() => <Text style={{ color: colors.text }}>Snippets</Text>}\n          onPress={() => {\n            navigation.navigate(\"TabSnippets\");\n            navigation.dispatch(DrawerActions.closeDrawer());\n          }}\n          icon={() => (\n            <Icon\n              color={colors.text}\n              size={24}\n              name={isFocused ? \"list-circle-sharp\" : \"list-circle-outline\"}\n            />\n          )}\n        />\n      </DrawerContentScrollView>\n    );\n  }\n\n  const Drawer = createDrawerNavigator();\n\n  return (\n    <Drawer.Navigator\n      initialRouteName=\"Dev\"\n      drawerContent={(props) => <CustomDrawerContent {...props} />}\n      drawerType=\"slide\"\n      drawerStyle={{\n        backgroundColor: colors.background,\n        width: 200,\n      }}\n    >\n      <Drawer.Screen\n        name=\"Dev\"\n        component={TabDevScreen}\n        options={{\n          drawerIcon: () => (\n            <Icon\n              color={colors.text}\n              size={24}\n              name={isFocused ? \"person-circle-sharp\" : \"person-circle-outline\"}\n            />\n          ),\n        }}\n      />\n    </Drawer.Navigator>\n  );\n}\n","import * as React from \"react\";\nimport { ActivityIndicator, StyleSheet } from \"react-native\";\n\nimport { View } from \"../components/Themed\";\n\nimport { useTheme } from \"../components/ThemeContext\";\nimport { Text, Image, colors as elementsColor } from \"react-native-elements\";\nimport Icon from \"react-native-vector-icons/FontAwesome5\";\n\nexport default function TabProjectsScreen() {\n  const { colors } = useTheme();\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      backgroundColor: colors.background,\n    },\n  });\n\n  const elemStyles = {\n    title: {\n      color: colors.text,\n    },\n  };\n\n  return (\n    <View style={styles.container}>\n      <Icon\n        name=\"hard-hat\"\n        size={30}\n        color={colors.text}\n        style={{ marginTop: 50 }}\n      />\n      <Text h2 style={elemStyles.title}>\n        Projects\n      </Text>\n    </View>\n  );\n}\n","import * as React from \"react\";\nimport { ActivityIndicator, StyleSheet } from \"react-native\";\n\nimport { View } from \"../components/Themed\";\n\nimport { useTheme } from \"../components/ThemeContext\";\nimport { Text, Image, colors as elementsColor } from \"react-native-elements\";\nimport Icon from \"react-native-vector-icons/FontAwesome5\";\n\nexport default function TabSnippetsScreen() {\n  const { colors } = useTheme();\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      backgroundColor: colors.background,\n    },\n  });\n\n  const elemStyles = {\n    title: {\n      color: colors.text,\n    },\n  };\n\n  return (\n    <View style={styles.container}>\n      <Icon\n        name=\"hard-hat\"\n        size={30}\n        color={colors.text}\n        style={{ marginTop: 50 }}\n      />\n      <Text h2 style={elemStyles.title}>\n        Snippets\n      </Text>\n    </View>\n  );\n}\n","// import { Ionicons } from \"@expo/vector-icons\";\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport * as React from \"react\";\nimport { Button, View, Text, ColorSchemeName } from \"react-native\";\n\n// import NotFoundScreen from \"../screens/NotFoundScreen\";\nimport { RootStackParamList } from \"../types\";\n// import BottomTabNavigator from \"./_BottomTabNavigator\";\n// import MaterialTopTabNavigator from \"./MaterialTopTabNavigator\";\n// import LinkingConfiguration from \"./LinkingConfiguration\";\n\n// import { Appearance } from \"react-native-appearance\";\n\nimport { useTheme } from \"../components/ThemeContext\";\nimport Icon from \"react-native-vector-icons/Ionicons\";\n\nimport TabMainScreen from \"./MainScreen\";\nimport TabDevScreen from \"../screens/TabDevScreen\";\nimport TabProjectsScreen from \"../screens/TabProjectsScreen\";\nimport TabSnippetsScreen from \"../screens/TabSnippetsScreen\";\nimport {\n  TabOneParamList,\n  TabTwoParamList,\n  TabThreeParamList,\n  TabFourParamList,\n} from \"../types\";\n\nfunction SettingsScreen({ route, navigation }: any) {\n  const { user } = route.params;\n  return (\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n      <Text>Settings Screen</Text>\n      <Text>userParam: {JSON.stringify(user)}</Text>\n      <Button title=\"Go to Dev\" onPress={() => navigation.navigate(\"Dev\")} />\n    </View>\n  );\n}\n\nfunction DevScreen({ navigation }: any) {\n  return (\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n      <Text>Dev Screen</Text>\n      <Button\n        title=\"Go to Settings\"\n        onPress={() => navigation.navigate(\"TabProjects\")}\n      />\n    </View>\n  );\n}\n\nfunction HomeScreen({ navigation }: any) {\n  return (\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n      <Text>Home Screen</Text>\n      <Button\n        title=\"Go to Settings\"\n        onPress={() =>\n          navigation.navigate(\"Root\", {\n            screen: \"Settings\",\n            params: { user: \"jane\" },\n          })\n        }\n      />\n    </View>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\nconst TopTab = createMaterialTopTabNavigator();\n\nfunction Root() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Root\" component={DevScreen} />\n    </Stack.Navigator>\n  );\n}\n\n// If you are not familiar with React Navigation, we recommend going through the\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\nexport default function Navigation({\n  colorScheme,\n}: {\n  colorScheme: ColorSchemeName;\n}) {\n  const { setScheme, colors, isDark } = useTheme();\n\n  return (\n    <NavigationContainer>\n      <TopTab.Navigator\n        initialRouteName=\"TabDev\"\n        tabBarPosition=\"bottom\"\n        lazy={true}\n        lazyPreloadDistance={0.3}\n        swipeVelocityImpact={0.3}\n        tabBarOptions={{\n          activeTintColor: colors.primary,\n          style: { backgroundColor: colors.navBackground },\n          showIcon: true,\n          indicatorStyle: {\n            backgroundColor: colors.primary,\n          },\n          iconStyle: {\n            flexWrap: \"wrap\",\n          },\n          pressColor: \"whitesmoke\",\n          allowFontScaling: false,\n        }}\n      >\n        <TopTab.Screen\n          name=\"TabDev\"\n          component={MainScreenTabNavigator}\n          options={{\n            tabBarLabel: \"Dev\",\n            tabBarIcon: ({ color }) => (\n              <TabBarIcon name=\"person-circle-sharp\" color={color} />\n            ),\n          }}\n        />\n        <TopTab.Screen\n          name=\"TabProjects\"\n          component={ProjectsTabNavigator}\n          options={{\n            tabBarLabel: \"Projects\",\n            tabBarIcon: ({ color }) => (\n              <TabBarIcon name=\"briefcase-sharp\" color={color} />\n            ),\n          }}\n        />\n        <TopTab.Screen\n          name=\"TabSnippets\"\n          component={SnippetsTabNavigator}\n          options={{\n            tabBarLabel: \"Snippets\",\n            tabBarIcon: ({ color }) => (\n              <TabBarIcon name=\"list-circle-sharp\" color={color} />\n            ),\n          }}\n        />\n      </TopTab.Navigator>\n    </NavigationContainer>\n  );\n}\n\nfunction TabBarIcon(props: { name: string; color: string }) {\n  return <Icon size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\nlet dpTitle = \"Adrian del Rosario - \";\n\nconst MainScreenTabStack = createStackNavigator<TabFourParamList>();\n\nfunction MainScreenTabNavigator() {\n  return (\n    <MainScreenTabStack.Navigator>\n      <MainScreenTabStack.Screen\n        name=\"TabMainScreen\"\n        component={TabMainScreen}\n        options={{\n          title: dpTitle + \"Dev\",\n          headerShown: false,\n          headerTitle: \"Tab One Title\",\n        }}\n      />\n    </MainScreenTabStack.Navigator>\n  );\n}\n\nconst DevTabStack = createStackNavigator<TabOneParamList>();\n\nfunction DevTabNavigator() {\n  return (\n    <DevTabStack.Navigator>\n      <DevTabStack.Screen\n        name=\"TabDevScreen\"\n        component={TabDevScreen}\n        options={{\n          title: dpTitle + \"Dev\",\n          headerShown: false,\n          headerTitle: \"Tab One Title\",\n        }}\n      />\n    </DevTabStack.Navigator>\n  );\n}\n\nconst ProjectsTabStack = createStackNavigator<TabTwoParamList>();\n\nfunction ProjectsTabNavigator() {\n  return (\n    <ProjectsTabStack.Navigator>\n      <ProjectsTabStack.Screen\n        name=\"TabProjectsScreen\"\n        component={TabProjectsScreen}\n        options={{\n          title: dpTitle + \"Projects\",\n          headerShown: false,\n          headerTitle: \"Tab Two Title\",\n        }}\n      />\n    </ProjectsTabStack.Navigator>\n  );\n}\n\nconst SnippetsTabStack = createStackNavigator<TabThreeParamList>();\n\nfunction SnippetsTabNavigator() {\n  return (\n    <SnippetsTabStack.Navigator>\n      <SnippetsTabStack.Screen\n        name=\"TabSnippetsScreen\"\n        component={TabSnippetsScreen}\n        options={{\n          title: dpTitle + \"Snippets\",\n          headerShown: false,\n          headerTitle: \"Tab Two Title\",\n        }}\n      />\n    </SnippetsTabStack.Navigator>\n  );\n}\n\n// function RootNavigator() {\n//   return (\n//     <Stack.Navigator screenOptions={{ headerShown: false }}>\n//       <Stack.Screen\n//         name=\"Root\"\n//         // component={BottomTabNavigator}\n//         // component={MaterialTopTabNavigator}\n//         component={RootNavigator}\n//       />\n//       <Drawer.Screen name=\"TabDevScreen\" component={TabDevScreen} />\n//       <Stack.Screen\n//         name=\"NotFound\"\n//         component={NotFoundScreen}\n//         options={{ title: \"Oops!\" }}\n//       />\n//     </Stack.Navigator>\n//   );\n// }\n","import React, { useState, useRef, useEffect } from \"react\";\nimport {\n  Animated,\n  Easing,\n  View,\n  Platform,\n  TouchableOpacity,\n} from \"react-native\";\nimport { Text, Overlay } from \"react-native-elements\";\n\nimport Modal from \"modal-react-native-web\";\n\nimport { useTheme } from \"../components/ThemeContext\";\nimport Icon from \"react-native-vector-icons/FontAwesome5\";\n\nexport default function WelcomeOverlay() {\n  const { setScheme, colors, isDark } = useTheme();\n\n  const [visible, setVisible] = useState(true);\n\n  const toggleOverlay = () => {\n    setVisible(!visible);\n  };\n\n  const SwipeFadeAnim = (props: any) => {\n    const fadeStartValue = useRef(new Animated.Value(1)).current;\n    const fadeEndValue = 0;\n    const fadeDuration = 900;\n\n    const swipeStartValue = useRef(new Animated.Value(0)).current;\n    let swipeEndValue = props.direction == \"left\" ? -173 : 173;\n    const swipeDuration = 700;\n\n    const iterations = 1000;\n    const delay = 3000;\n\n    useEffect(() => {\n      function animate() {\n        Animated.timing(fadeStartValue, {\n          useNativeDriver: true,\n          isInteraction: false,\n          toValue: fadeEndValue,\n          duration: fadeDuration,\n          easing: Easing.linear,\n        }).start(() => {\n          setTimeout(() => {\n            fadeStartValue.setValue(1);\n          }, fadeDuration);\n        });\n        Animated.timing(swipeStartValue, {\n          useNativeDriver: true,\n          isInteraction: false,\n          toValue: swipeEndValue,\n          duration: swipeDuration,\n          easing: Easing.linear,\n        }).start(() => {\n          setTimeout(() => {\n            swipeStartValue.setValue(0);\n          }, swipeDuration);\n        });\n      }\n\n      let looper: (i: number) => void = (i: number) => {\n        setTimeout(() => {\n          if (visible) animate();\n          if (--i) {\n            looper(i);\n          }\n        }, delay);\n      };\n\n      looper(iterations);\n    }, [\n      fadeStartValue,\n      fadeEndValue,\n      fadeDuration,\n      swipeStartValue,\n      swipeEndValue,\n      swipeDuration,\n    ]);\n\n    return (\n      <Animated.View // Special animatable View\n        style={{\n          ...props.style,\n          opacity: fadeStartValue, // Bind opacity to animated value\n          transform: [\n            {\n              translateX: swipeStartValue,\n            },\n          ],\n        }}\n      >\n        {props.children}\n      </Animated.View>\n    );\n  };\n\n  Modal.setAppElement(\"body\");\n\n  return (\n    <View\n      style={{\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        padding: 11,\n        zIndex: 1,\n        elevation: 1,\n      }}\n    >\n      <TouchableOpacity onPress={toggleOverlay}>\n        <Icon\n          name=\"info-circle\"\n          size={21}\n          color={colors.primary}\n          style={{ paddingLeft: 7 }}\n          solid\n        />\n      </TouchableOpacity>\n\n      <Overlay\n        ModalComponent={Platform.OS === \"web\" ? Modal : undefined}\n        isVisible={visible}\n        onBackdropPress={toggleOverlay}\n        overlayStyle={{\n          // backgroundColor: \"transparent\",\n          opacity: 0.7,\n          elevation: 0,\n          shadowOpacity: 0,\n          width: \"100%\",\n          height: \"100%\",\n        }}\n      >\n        <TouchableOpacity\n          onPress={toggleOverlay}\n          style={{\n            flex: 1,\n          }}\n        >\n          <View\n            style={{\n              alignItems: \"flex-start\",\n              flex: 1,\n              justifyContent: \"center\",\n            }}\n          >\n            <Text\n              style={{\n                color: colors.primary,\n                fontSize: 27,\n                position: \"absolute\",\n                top: \"30%\",\n                flex: 1,\n                alignSelf: \"center\",\n                fontWeight: \"700\",\n              }}\n            >\n              User Guide\n            </Text>\n            <View\n              style={{\n                position: \"absolute\",\n                top: 50,\n                left: 0,\n                flex: 1,\n                alignItems: \"flex-start\",\n              }}\n            >\n              <Icon\n                name=\"long-arrow-alt-up\"\n                size={37}\n                color={colors.primary}\n                style={{ marginLeft: 7 }}\n                solid\n              />\n              <Text style={{ color: colors.primary, fontSize: 17 }}>\n                Toggle Guide\n              </Text>\n            </View>\n\n            <View\n              style={{\n                position: \"absolute\",\n                top: 50,\n                right: 10,\n                flex: 1,\n                alignItems: \"center\",\n              }}\n            >\n              <Icon\n                name=\"long-arrow-alt-up\"\n                size={37}\n                color={colors.primary}\n                style={{ marginLeft: 7 }}\n                solid\n              />\n              <Text style={{ color: colors.primary, fontSize: 17 }}>\n                Dark Mode\n              </Text>\n            </View>\n\n            <View\n              style={{\n                marginLeft: \"3%\",\n              }}\n            >\n              <SwipeFadeAnim>\n                <Icon\n                  name=\"hand-point-up\"\n                  size={37}\n                  color={colors.primary}\n                  style={{ marginLeft: 7 }}\n                  solid\n                />\n              </SwipeFadeAnim>\n              <Text\n                style={{\n                  color: colors.primary,\n                  fontSize: 17,\n                  marginLeft: 15,\n                }}\n              >\n                Swipe to open drawer\n              </Text>\n            </View>\n\n            <View\n              style={{\n                position: \"absolute\",\n                top: \"70%\",\n                right: \"7%\",\n                flex: 1,\n                alignItems: \"flex-end\",\n              }}\n            >\n              <SwipeFadeAnim direction=\"left\">\n                <Icon\n                  name=\"hand-point-up\"\n                  size={37}\n                  color={colors.primary}\n                  style={{ marginLeft: 7 }}\n                  solid\n                />\n              </SwipeFadeAnim>\n              <Text\n                style={{\n                  color: colors.primary,\n                  fontSize: 17,\n                }}\n              >\n                Swipe to move between pages\n              </Text>\n            </View>\n\n            <View\n              style={{\n                position: \"absolute\",\n                bottom: 50,\n                right: 10,\n                flex: 1,\n                alignItems: \"center\",\n              }}\n            >\n              <Text style={{ color: colors.primary, fontSize: 17 }}>\n                Tabs Navigation\n              </Text>\n              <Icon\n                name=\"long-arrow-alt-down\"\n                size={37}\n                color={colors.primary}\n                style={{ marginLeft: 7 }}\n                solid\n              />\n            </View>\n          </View>\n        </TouchableOpacity>\n      </Overlay>\n    </View>\n  );\n}\n","// import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { StatusBar } from \"react-native\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\n\nimport useCachedResources from \"./app/hooks/useCachedResources\";\n// import useColorScheme from \"./app/hooks/useColorScheme\";\nimport Toolbar from \"./app/components/Toolbar\";\nimport Navigation from \"./app/navigation\";\n\nimport { AppearanceProvider, Appearance } from \"react-native-appearance\";\n\nimport { ThemeProvider } from \"./app/components/ThemeContext\";\n\nimport WelcomeOverlay from \"./app/screens/WelcomeOverlay\";\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  // const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <AppearanceProvider>\n          <ThemeProvider>\n            <WelcomeOverlay />\n            <Toolbar />\n            <Navigation\n              colorScheme={\n                Appearance.getColorScheme() === \"dark\" ? \"dark\" : \"light\"\n              }\n            />\n            <StatusBar />\n          </ThemeProvider>\n        </AppearanceProvider>\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}